


entity Scenario {
	title String
    description String
    language Language
}


entity Module {
	title String,
	description String,
	startDate Instant,
	endData Instant
    level Level
}


entity Learner {
	
	firstName String,
	lastName String,
	email String,
	phoneNumber String
}

entity Educator {
	firstName String,
	lastName String,
	email String
}

entity Domain {
	title String
    description String
    city String
}

entity Competence {
 title String
 description String
 type CompetenceType
}

entity Concept {
 title String
 description String
}

entity Activity {
title String
description String
type ActivityType
tool Tool
difficulty Difficulty
}

entity Fragment {
 title String 
}

entity Precondition {
 metadata TextBlob
}
entity Effect {
 metadata TextBlob
}


enum Tool {
 COMPUTER, MOBILE
}

enum ActivityType {
INDIVIDUAL, GROUP
}
enum Difficulty {
LOW, MODERATE, INTERMEDIATE, HIGH, ADVANCED, PERSONALIZED
}

enum Language {
     ENGLISH, ITALIAN
}
enum Level {
     BEGINNER, INTERMEDIATE, ADVANCED
}

enum CompetenceType {
SKILL, KNOWLEDGE, ATTITUDE
}


relationship OneToOne {
   Module { Scenario(title) } to Scenario {Module(title)}
}

relationship OneToOne {
  Scenario { Domain(title) } to Domain {Scenario(title)}
}

relationship ManyToMany {
  Scenario { Educator(lastName) } to Educator{Scenario(title)}
}

relationship ManyToMany {
  Scenario { Competence(title) } to Competence{Scenario(title)}
}


relationship ManyToMany {
  Competence { Concept(title) } to Concept { Competence(title) }
}


relationship ManyToMany {
  Scenario { Learner(lastName) } to Learner{Scenario(title)}
}

relationship ManyToMany {
  Fragment { Activity(title) } to Activity{Fragment(title)}
}

relationship ManyToMany {
  Activity { Concept(title) } to Concept{ Activity(title) }
}

relationship OneToMany {
  Activity { Precondition(metadata) } to Precondition{ Activity(title) }
}

relationship OneToMany {
  Activity { Effect(metadata) } to Effect{ Activity(title) }
}

relationship OneToMany {
  Precondition { Concept(title) } to Concept{ Precondition(metadata) }
}

relationship OneToMany {
  Effect { Concept(title) } to Concept{ Effect(metadata) }
}

relationship OneToMany {
  Competence{sons} to Competence{parent}
}

relationship OneToMany {
  Concept{sons} to Concept{parent}
}




relationship OneToMany {
  Module { Fragment(title) } to Fragment{Module(title)}
}



// Set pagination options
paginate Learner, Educator with infinite-scroll
paginate Domain, Scenario with pagination

// Use Data Transfer Objects (DTO)
// dto * with mapstruct

// Set service options to all except few
//service all with serviceImpl except Domain, Scenario

// Set an angular suffix
// angularSuffix * with mySuffix
